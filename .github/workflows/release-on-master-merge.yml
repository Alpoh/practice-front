name: Release on merge commit to master

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  release:
    name: Create release for merge commit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect if commit is a merge commit
        id: detect
        run: |
          PARENTS=$(git show -s --format=%P $GITHUB_SHA)
          COUNT=$(echo "$PARENTS" | wc -w | tr -d ' ')
          echo "parents=$PARENTS"
          echo "count=$COUNT"
          if [ "$COUNT" -gt 1 ]; then
            echo "is_merge=true" >> $GITHUB_OUTPUT
          else
            echo "is_merge=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if not a merge commit
        if: steps.detect.outputs.is_merge != 'true'
        run: |
          echo "Not a merge commit on master. Skipping release."

      - name: Compute release metadata
        if: steps.detect.outputs.is_merge == 'true'
        id: meta
        run: |
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-8)
          TS=$(date -u +"%Y%m%d-%H%M%S")
          TAG="release-master-${TS}-${SHORT_SHA}"
          NAME="Release ${TAG}"
          BODY=$(cat << 'EOF'
          Automated release generated from a merge commit into master.

          This release was created by the release-on-master-merge workflow.
          EOF
          )
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "body<<BODY_END" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "BODY_END" >> $GITHUB_OUTPUT

      - name: Create tag
        if: steps.detect.outputs.is_merge == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = process.env.TAG;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.sha;
            try {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tag}`,
                sha,
              });
              core.info(`Created tag ${tag}`);
            } catch (e) {
              if (e.status === 422 && /Reference already exists/.test(e.message)) {
                core.info(`Tag ${tag} already exists, continuing.`);
              } else {
                throw e;
              }
            }
          result-encoding: string
        env:
          TAG: ${{ steps.meta.outputs.tag }}

      - name: Create GitHub Release
        if: steps.detect.outputs.is_merge == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = process.env.TAG;
            const name = process.env.NAME;
            const body = process.env.BODY;
            try {
              await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                name,
                body,
                draft: false,
                prerelease: false,
              });
              core.info(`Created release ${name}`);
            } catch (e) {
              if (e.status === 422 && /already_exists/.test(e.message)) {
                core.info(`Release for ${tag} already exists, skipping.`);
              } else {
                throw e;
              }
            }
          result-encoding: string
        env:
          TAG: ${{ steps.meta.outputs.tag }}
          NAME: ${{ steps.meta.outputs.name }}
          BODY: ${{ steps.meta.outputs.body }}

      - name: Get associated PR for this commit
        if: steps.detect.outputs.is_merge == 'true'
        id: prinfo
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.sha;
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha: sha });
            if (Array.isArray(prs) && prs.length > 0) {
              const pr = prs[0];
              core.setOutput('number', pr.number.toString());
              core.setOutput('title', pr.title || '');
              core.setOutput('body', pr.body || '');
            } else {
              core.setOutput('number', '');
              // Fallback to commit message if no PR found
              const { data: commit } = await github.rest.repos.getCommit({ owner, repo, ref: sha });
              core.setOutput('title', commit.commit.message.split('\n')[0]);
              core.setOutput('body', commit.commit.message);
            }
          result-encoding: string

      - name: Update HELP.md with release info
        if: steps.detect.outputs.is_merge == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const helpPath = path.join(process.env.GITHUB_WORKSPACE, 'HELP.md');

            const tag = process.env.TAG;
            const prNumber = process.env.PR_NUMBER;
            const title = process.env.PR_TITLE;
            const body = process.env.PR_BODY;
            const actor = context.actor;
            const ts = new Date().toISOString();

            const start = '<!-- RELEASE-AUTO-SECTION:START -->';
            const end = '<!-- RELEASE-AUTO-SECTION:END -->';
            const header = `\n${start}\n`;
            const footer = `\n${end}\n`;

            const lines = [];
            lines.push('# Release Information (auto-updated)');
            lines.push('');
            lines.push(`- Version (tag): ${tag}`);
            if (prNumber) {
              lines.push(`- PR: #${prNumber} ${title}`);
            } else {
              lines.push(`- Source: Merge commit on master`);
              lines.push(`- Title: ${title}`);
            }
            lines.push(`- Actor: @${actor}`);
            lines.push('');
            lines.push('## Release Notes');
            lines.push(body && body.trim() ? body : '_No description provided._');
            lines.push('');

            const section = lines.join('\n');
            let content = '';
            if (fs.existsSync(helpPath)) {
              content = fs.readFileSync(helpPath, 'utf8');
            } else {
              content = '# HELP\n\nThis file is automatically updated on releases.\n';
            }
            const block = header + section + footer;
            if (content.includes(start) && content.includes(end)) {
              const regex = new RegExp(`${start}[\s\S]*?${end}`, 'm');
              content = content.replace(regex, block.trim());
            } else {
              content = content.trimEnd() + '\n\n' + block.trim();
            }
            fs.writeFileSync(helpPath, content, 'utf8');
            core.info('HELP.md updated with release info.');
          result-encoding: string
        env:
          TAG: ${{ steps.meta.outputs.tag }}
          PR_NUMBER: ${{ steps.prinfo.outputs.number }}
          PR_TITLE: ${{ steps.prinfo.outputs.title }}
          PR_BODY: ${{ steps.prinfo.outputs.body }}

      - name: Commit and push HELP.md changes
        if: steps.detect.outputs.is_merge == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          add: 'HELP.md'
          message: 'chore: update HELP.md for release ${{ steps.meta.outputs.tag }}'
          default_author: github_actions
          push: true

  guard-direct-push:
    name: Guard against direct pushes to master (informational)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Determine if commit likely came from a PR
        id: prcheck
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Try to find an associated PR for this commit
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });
            const hasPR = Array.isArray(prs) && prs.length > 0;
            core.setOutput('has_pr', hasPR ? 'true' : 'false');
            if (!hasPR) {
              core.warning('This push to master does not appear to be associated with a Pull Request. Consider enabling Branch Protection to prevent direct pushes.');
            }
      - name: Warn on direct push
        if: steps.prcheck.outputs.has_pr != 'true'
        run: |
          echo "WARNING: Direct push detected on master. Please use Pull Requests."
          # Note: To actually block direct pushes, configure Branch Protection in repository settings.
