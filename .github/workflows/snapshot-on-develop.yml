name: Snapshot on squash-merge to develop

on:
  pull_request:
    types: [ closed ]
    branches:
      - develop

permissions:
  contents: write
  pull-requests: read

jobs:
  create-snapshot:
    name: Create snapshot tag and prerelease
    if: >-
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest

    steps:
      - name: Compute snapshot metadata
        id: meta
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHA=${{ github.event.pull_request.merge_commit_sha }}
          SHORT_SHA=$(echo "$SHA" | cut -c1-8)
          # Use UTC timestamp
          TS=$(date -u +"%Y%m%d-%H%M%S")
          TAG="snapshot-develop-${TS}-pr${PR_NUMBER}-${SHORT_SHA}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Create tag ref
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = process.env.TAG;
            const sha = process.env.SHA;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            if (!tag || !sha) {
              throw new Error(`Missing tag or sha. tag='${tag}', sha='${sha}'`);
            }
            try {
              // Try to create a lightweight tag
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tag}`,
                sha,
              });
              core.info(`Created tag ${tag} at ${sha}`);
            } catch (e) {
              if (e.status === 422 && /Reference already exists/.test(e.message)) {
                core.info(`Tag ${tag} already exists, continuing.`);
              } else {
                throw e;
              }
            }
          result-encoding: string
        env:
          TAG: ${{ steps.meta.outputs.tag }}
          SHA: ${{ steps.meta.outputs.sha }}

      - name: Create prerelease
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = process.env.TAG;
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            if (!tag) {
              throw new Error('Missing TAG env for prerelease');
            }
            const name = `Snapshot ${tag}`;
            const body = `Snapshot generated from squash-merge into develop.\n\n` +
              `- PR: #${pr.number} ${pr.title}\n` +
              `- Actor: @${context.actor}\n` +
              `- Commit: ${pr.merge_commit_sha}\n` +
              `- Branch: ${pr.base.ref}`;

            // Attempt to create a release. If tag already has a release, skip.
            try {
              await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                name,
                body,
                draft: false,
                prerelease: true,
              });
              core.info(`Created prerelease for ${tag}`);
            } catch (e) {
              if (e.status === 422 && /already_exists/.test(e.message)) {
                core.info(`Release for ${tag} already exists, skipping.`);
              } else {
                throw e;
              }
            }
          result-encoding: string
        env:
          TAG: ${{ steps.meta.outputs.tag }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update README.md with snapshot info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const readmePath = path.join(process.env.GITHUB_WORKSPACE, 'README.md');

            const tag = process.env.TAG;
            const pr = context.payload.pull_request;
            const actor = context.actor;
            const ts = new Date().toISOString();
            const version = `${tag}-SNAPSHOT`;

            const start = '<!-- SNAPSHOT-AUTO-SECTION:START -->';
            const end = '<!-- SNAPSHOT-AUTO-SECTION:END -->';
            const header = `\n${start}\n`;
            const footer = `\n${end}\n`;
            const section = [
              '## Snapshot Version (auto-updated)',
              '',
              `- Version: ${version}`,
              `- PR: #${pr.number} ${pr.title}`,
              `- Author: @${actor}`,
              `- Commit: ${pr.merge_commit_sha}`,
              `- Branch: ${pr.base.ref}`,
              '',
              '### PR Description',
              pr.body ? pr.body : '_No description provided._',
              ''
            ].join('\n');

            let readme = fs.readFileSync(readmePath, 'utf8');
            const block = header + section + footer;
            if (readme.includes(start) && readme.includes(end)) {
              const regex = new RegExp(`${start}[\\s\\S]*?${end}`, 'm');
              readme = readme.replace(regex, block.trim());
            } else {
              readme = readme.trimEnd() + '\n\n' + block.trim();
            }
            fs.writeFileSync(readmePath, readme, 'utf8');
            core.info('README.md updated with snapshot info.');
          result-encoding: string
        env:
          TAG: ${{ steps.meta.outputs.tag }}

      - name: Commit and push README.md changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'README.md'
          message: 'chore: update README.md with snapshot ${{ steps.meta.outputs.tag }}-SNAPSHOT'
          default_author: github_actions
          push: true
